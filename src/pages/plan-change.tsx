import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { stripe } from '@/lib/stripe'
import { GetStaticProps } from 'next'
import Stripe from 'stripe'
import { Button, Heading, Text }  from '@sonicaweb3/react'
import { useState } from 'react'
import { Subscription } from '@/models/subscriptions'
import { userHasActiveSubscription } from '@/utils'

const inter = Inter({ subsets: ['latin'] })

interface HomeProps {
  products: {
    id: string;
    name: string;
    price: number;
    priceId: number;
    description: string;
    image: string;    
  }[]
  asPermissionsForMainnet: boolean;
  subscription: string;
}

type SubscriptionProps = typeof Subscription;

export default function ChangePlan({ products, asPermissionsForMainnet, subscription }:HomeProps) {
  
  const [isChangePlan, setIsChangePlan] = useState(false);

  if(subscription.length === 0) return (<div>Not found</div>)

  const currentSubscription: SubscriptionProps = JSON.parse(subscription);

  async function handleChangePlan(priceId: number) {
    setIsChangePlan(true);
    fetch('/api/plan-change', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        currentPlanId: currentSubscription.plan_item_id,
        priceId,
        subscriptionId: currentSubscription.subscription_id
      })
    }).then(res => {
      alert('Plan changed successfully');
      window.location.reload()
    })
    .catch(err => {
      setIsChangePlan(false) 
      console.log(err)
      alert('Error: ' + err)
    });
  }

  return (
    <>
      <Head>
        <title>Sonica - Subscriptions</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
      <>
        <Heading variant='big-title'>Change your plan</Heading>
        {products.map(product => 
        
          <>
         {product.priceId.toString() === currentSubscription.plan_id ? 
            (<button disabled key={product.id} className={styles.item}>
                <Text>{product.name}</Text>
                <Text>Current Plan</Text>
                <Text>{product.price}</Text>
            </button>)
            : 
            (<button disabled={isChangePlan} key={product.id} onClick={() => handleChangePlan(product.priceId)} className={styles.item}>
                <Text>{product.name}</Text>
                <Text>{product.price}</Text>
            </button>)
          }
          </>
        
      
        )}        
      </>
      </main>
    </>
  )
}

export const getStaticProps: GetStaticProps = async () => {

    const response = await stripe.products.list({
      expand: ['data.default_price'],
      active: true,
      type: 'service',
    });
  
    const products = response.data.map((product: Stripe.Product) => {
    const price = product.default_price as Stripe.Price;

    const priceFormatted = new Intl.NumberFormat('en-US', {'currency': 'USD', 'style': 'currency'})
                                .format((price?.unit_amount! / 100) ?? 0);
                    
    return {
      id: product.id,
      name: product.name,
      price: priceFormatted,
      description: product.description,
      image: product.images[0] ?? '',
      priceId: price?.id,
    }
  })

  const subscription = await userHasActiveSubscription('0x0000000')

  return {
    props: {
      products: products.reverse(),
      asPermissionsForMainnet: subscription.length > 0 ? true : false,
      subscription: JSON.stringify(subscription[0]?? []),
    },
    // revalidate: 60 * 60 * 2, // 2 hours
  }
}

// Todo: add planId in subscription model.
